// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	relationFieldNames          = builder.RawFieldNames(&Relation{})
	relationRows                = strings.Join(relationFieldNames, ",")
	relationRowsExpectAutoSet   = strings.Join(stringx.Remove(relationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	relationRowsWithPlaceHolder = strings.Join(stringx.Remove(relationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	relationModel interface {
		Insert(ctx context.Context, data *Relation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Relation, error)
		Update(ctx context.Context, data *Relation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Relation struct {
		Id         int64     `db:"id"`
		OwnerId    int64     `db:"owner_id"`  // 谁的关系信息
		TargetId   int64     `db:"target_id"` // 对应的谁
		Type       int64     `db:"type"`      // 关系类型： 1表示好友关系 2表示群关系
		Desc       string    `db:"desc"`      // 描述
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newRelationModel(conn sqlx.SqlConn) *defaultRelationModel {
	return &defaultRelationModel{
		conn:  conn,
		table: "`relation`",
	}
}

func (m *defaultRelationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRelationModel) FindOne(ctx context.Context, id int64) (*Relation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", relationRows, m.table)
	var resp Relation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationModel) Insert(ctx context.Context, data *Relation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, relationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OwnerId, data.TargetId, data.Type, data.Desc)
	return ret, err
}

func (m *defaultRelationModel) Update(ctx context.Context, data *Relation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, relationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OwnerId, data.TargetId, data.Type, data.Desc, data.Id)
	return err
}

func (m *defaultRelationModel) tableName() string {
	return m.table
}
